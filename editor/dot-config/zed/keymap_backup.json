// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "bindings": {
      "ctrl-space t": "workspace::NewCenterTerminal"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      "alt-g": ["task::Spawn", { "task_name": "start lazygit" }]
    }
  },
  {
    "context": "EmptyPane",
    "bindings": {
      "space s p": "projects::OpenRecent",
      "space s f": "file_finder::Toggle",
      "space e": "pane::RevealInProjectPanel"
    }
  },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      // Git
      "space g h d": "editor::ToggleSelectedDiffHunks",
      "space g h r": "git::Restore",
      "space g s": "git_panel::ToggleFocus",
      "n": "search::SelectNextMatch",

      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",

      // Toggle soft wrap
      "space u w": "editor::ToggleSoftWrap",

      // NOTE: Toggle Zen mode, not fully working yet
      "space c z": "workspace::ToggleCenteredLayout",

      // Open markdown preview
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",

      // Open recent project
      "space s p": "projects::OpenRecent",

      // Search word under cursor
      "space /": "pane::DeploySearch",

      "space s f": "file_finder::Toggle",

      "alt-g": ["task::Spawn", { "task_name": "start lazygit" }],

      // Chat with AI
      "space a c": "agent::ToggleFocus",

      // Go to file with `gf`
      "g f": "editor::OpenExcerpts"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      // ~~~~~~~ Normal Mode
      // Doc hover
      "K": "editor::Hover",
      // buffer :bn :bp
      "L": "pane::ActivateNextItem",
      "H": "pane::ActivatePreviousItem",

      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",

      // LSP
      "space c a": "editor::ToggleCodeActions",
      "space .": "editor::ToggleCodeActions",
      "space r": "editor::Rename",
      "space x": "pane::CloseActiveItem",
      "space X": "pane::ReopenClosedItem",

      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",

      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",

      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",

      "space e": "pane::RevealInProjectPanel"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      // ~~~~~~ Visual Mode
      "K": "editor::MoveLineUp",
      "J": "editor::MoveLineDown",
      "space g c": "editor::ToggleComments",
      "/": "buffer_search::Deploy"
    }
  },
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in insert mode
      // ~~~~~~ Insert Mode
      "j k": "vim::SwitchToNormalMode"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "ctrl-y": "editor::ConfirmCompletion"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "tab": "editor::Tab",
      "ctrl-b": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && vim_mode == insert && menu",
    "bindings": {
      // put key-bindings here if you want them to work in insert mode
      // ~~~~~~ Insert Mode
      "j k": "vim::SwitchToNormalMode"
    }
  },
  {
    "context": "Editor && vim_mode == replace",
    "bindings": {
      // put key-bindings here if you want them to work in Replace mode
      // ~~~~~~ Replace Mode
      "j k": "vim::SwitchToNormalMode"
    }
  },
  // Toggle terminal
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      // Close project panel as project file panel on the right
      "q": "workspace::ToggleRightDock",
      "space e": "workspace::ToggleRightDock",
      // Navigate between panel
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // Sneak motion, refer https://github.com/zed-industries/zed/pull/22793/files#diff-90c0cb07588e2f309c31f0bb17096728b8f4e0bad71f3152d4d81ca867321c68
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "s": ["vim::PushSneak", {}],
      "S": ["vim::PushSneakBackward", {}]
    }
  },
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown"
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // Code Action
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions" // zed specific
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "ctrl-1": ["pane::ActivateItem", 0],
      "ctrl-2": ["pane::ActivateItem", 1],
      "ctrl-3": ["pane::ActivateItem", 2],
      "ctrl-4": ["pane::ActivateItem", 3],
      "ctrl-5": ["pane::ActivateItem", 4],
      "ctrl-6": ["pane::ActivateItem", 5],
      "ctrl-7": ["pane::ActivateItem", 6],
      "ctrl-8": ["pane::ActivateItem", 7],
      "ctrl-9": ["pane::ActivateItem", 8],
      "ctrl-0": "pane::ActivateLastItem"
    }
  },
  {
    "context": "BufferSearchBar",
    "bindings": {
      "ctrl-r": "search::ToggleReplace"
    }
  },

  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      "d": ["workspace::SendKeystrokes", "\" _ d"],
      "D": ["workspace::SendKeystrokes", "\" _ D"],
      "c": ["workspace::SendKeystrokes", "\" _ c"],
      "C": ["workspace::SendKeystrokes", "\" _ C"],
      "p": ["vim::Paste", { "preserve_clipboard": true }]
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "shift-s": [
        "vim::PushOperator",
        {
          "AddSurrounds": {}
        }
      ]
    }
  }
]
